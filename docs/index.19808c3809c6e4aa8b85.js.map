{"version":3,"sources":["webpack:///./src/rsa.js","webpack:///./src/prime.worker.js","webpack:///./src/app.js"],"names":["bigInt","require","RSA","p","q","e","this","n","multiply","temp1","minus","temp2","phi","encrypt","plaintext","key","modPow","decrypt","ciphertext","d","validate","msg","i","length","push","toString","generateCandidate","phiArray","test","decryptable","propertyPhi","k","temp","plus","isDivisibleBy","privateKey","divide","candidateBar","increment","tempD","isPrime","pop","isOdd","ii","prototype","getAllPhi","y","r","pow","isEven","generatePublicKey","Worker","rowMap","finishWork","PrimeTable","props","useState","tableRows","setTableRows","_setRowMap","max","setMax","min","setMin","temporaryBuffer","setBuffer","generateTableRow","primeArray","primeMap","tableData","leq","isZero","genRowMap","map","row","primeRows","filter","prime","gt","lt","_primeRows","undefined","lastDigit","slice","col","scope","handleKeyDown","searchval","target","value","keyCode","console","log","Date","paginationNext","paginationPrev","useEffect","sortedData","flat","sort","a","b","tableRow","Pagination","size","PaginationItem","PaginationLink","previous","onClick","type","onKeyDown","next","data","headers","Button","worker","P_Worker","Promise","resolve","reject","thread","postMessage","onmessage","terminate","then","concat","Table","bordered","ReactDOM","render","document","getElementById"],"mappings":"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","file":"index.19808c3809c6e4aa8b85.js","sourcesContent":["const bigInt = require(\"big-integer\")\n\n\n//************************************* Function ************************************* //\n//**\n//*\n//\nfunction RSA(p,q,e) {\n  this.p = p;\n  this.q = q;\n  this.e = e;\n  this.n = bigInt(p).multiply(q);\n  let temp1 = bigInt(p).minus(1)\n  let temp2 = bigInt(q).minus(1)\n  this.phi = temp1.multiply(temp2);\n}\n\nRSA.encrypt = (plaintext, key) => plaintext.modPow(key.e,key.n);\nRSA.decrypt = (ciphertext, key) =>  ciphertext.modPow(key.d,key.n);\nRSA.validate = (ciphertext,plaintext,key) => {\n  let msg = [];\n  // Check whether the decrypted text match with the plaintext\n  for(let i = 0; i < ciphertext.length; i++) {\n    msg.push(RSA.decrypt(bigInt(ciphertext[i]),key));\n    if(msg[i].toString() !== plaintext[i]) return false\n  }\n\n  return true\n}\nRSA.generateCandidate = function (phiArray,{e:e,n:n} = {e: 0, n:0},ciphertext,plaintext) {\n  let d = {};\n  let test = {};\n  let decryptable = {};\n  for(let i = 0; i < phiArray.length; i++){\n    let phi = bigInt(phiArray[i]);\n    let propertyPhi = phi.toString();\n    d[propertyPhi] = []\n    test[propertyPhi] = []\n    decryptable[propertyPhi] = []\n\n    for (let k=1; d[propertyPhi].length < 1; k++) { //((phi*k)+1)/e\n      let temp = phi.multiply(k).plus(1)\n      if(temp.isDivisibleBy(e)){\n        let privateKey = {d:temp.divide(e),n};\n        if(RSA.validate(ciphertext,plaintext,privateKey)) {\n          candidateBar.increment();\n          d[propertyPhi].push(privateKey.d.toString());\n        }\n      }\n    }\n\n    if (d[propertyPhi].length > 0) {\n      if(i > 0){ //only for non true description\n        let tempD = bigInt(d[propertyPhi][0]); // Set first d to temp\n        if(!bigInt(d[propertyPhi][0]).isPrime()) d[propertyPhi].pop() // if not prime pop the first element\n        while(d[propertyPhi].length < 5) {\n          tempD = tempD.plus(phi); // d+phi*n\n          if(RSA.validate(ciphertext,plaintext,{d:tempD,n}) && tempD.isOdd()) {\n            candidateBar.increment();\n            d[propertyPhi].push(tempD.toString()) //is it odd and can decrypt\n          }\n        }\n      } else {\n        for(let ii=0; d[propertyPhi].length < 5; ii++) { //d+r*n\n          let tempD = bigInt(d[propertyPhi][ii]).plus(phi); //d+phi*n\n          candidateBar.increment();\n          d[propertyPhi].push(tempD.toString());\n        }\n      }\n\n    }\n\n    //condition check\n    for(let ii=0; ii < d[propertyPhi].length; ii++) { //d+r*n\n      test[propertyPhi].push(bigInt(d[propertyPhi][ii]).isPrime())\n      decryptable[propertyPhi].push(RSA.validate(ciphertext,plaintext,{d:d[propertyPhi][ii],n}))\n    }\n  }\n\n  return [d,test,decryptable];\n}\nRSA.prototype.getAllPhi = function() {\n  let phi = this.phi;\n  let n = this.n;\n  let phiArray = [];\n  let r = phi;\n  let y;\n  for(\n    y = 0,temp = bigInt(2).pow(y);\n    phiArray.length < 5 && r.isEven();\n    y++,temp = bigInt(2).pow(y),r = phi.divide(temp)\n  ) {\n    if(phi.isDivisibleBy(temp)) {\n      phiArray.push(r.toString());\n    }\n  }\n  phiArray.push(r.toString()); //last push since its not divisible anymore\n\n  return phiArray;\n}\nRSA.prototype.generatePublicKey = function() {\n  let n = this.n;\n  let e = this.e;\n  let publicKey = {e, n};\n  return publicKey;\n}\nexport default RSA;\n\nexport function generatePrime(min,max) {\n  let primeArray = [];\n  for(let i = bigInt(min); i.lt(max); i = i.plus(1))\n    if(i.isProbablePrime()) primeArray.push(i);\n  return primeArray\n}\nexport function genRowMap(min,max) {\n    const rowMap = [];\n    for(let i = bigInt(min); i.leq(max); i = i.plus(1))\n        if(i.isDivisibleBy(10) || i.isZero()) rowMap.push(i.toString());\n    return rowMap;\n  }\n","export default function() {\n  return new Worker(__webpack_public_path__ + \"prime.worker.d035ef669074ec96a198.worker.js\");\n}\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport bigInt from 'big-integer';\nimport {\n  Table,\n  Button,\n  Modal,\n  ModalBody,\n  Pagination,\n  PaginationItem,\n  PaginationLink,\n} from 'reactstrap';\nimport {CSVLink} from 'react-csv';\nimport {generatePrime, genRowMap} from './rsa'\nimport P_Worker from './prime.worker.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app.css';\n\nfunction createWork(worker, data) {\n  return new Promise((resolve,reject) => {\n    let thread = new worker();\n    thread.postMessage(data);\n    thread.onmessage = e => {\n      thread.terminate();\n      resolve(e.data);\n    }\n  })\n}\n\n\nfunction getLastDigit(str) {\n  return str.slice(-1);\n}\n\nlet rowMap = [];\nlet finishWork = 0;\nconst totalWorker = 1;\nconst divider = 1000;\nfunction PrimeTable(props) {\n  const [tableRows, setTableRows] = useState(null);\n  const [_rowMap, _setRowMap] = useState(1);\n  const [max, setMax] = useState(bigInt(1000));\n  const [min, setMin] = useState(bigInt(0));\n  const [temporaryBuffer, setBuffer] = useState(\"\");\n\n  function generateTableRow(primeArray) {\n\n    const primeMap = primeArray\n    const rowMap = genRowMap(min,max);\n\n    const tableData = rowMap.map(row => {\n      const primeRows = primeMap.filter(prime => bigInt(prime).gt(row) && bigInt(prime).lt(bigInt(row).plus(10)));\n      const _primeRows = [\" \",\"  \",\"   \",\"    \"];\n      for (let i=0; i < 4; i++) {\n        if(primeRows[i] !== undefined) {\n          //All of the primeRows are of BigInt, it needs to be stored as string or error will occured\n          let lastDigit = getLastDigit(primeRows[i].toString());\n          if(lastDigit === '1') _primeRows[0] = primeRows[i].toString();\n          else if (lastDigit === '3') _primeRows[1] = primeRows[i].toString();\n          else if (lastDigit === '7') _primeRows[2] = primeRows[i].toString();\n          else if (lastDigit === '9') _primeRows[3] = primeRows[i].toString();\n        }\n      }\n      return ([\n        row, ..._primeRows\n      ])\n    })\n\n    const _tableRows = tableData.map(col => (\n      <tr key={col[0]}>\n        <th scope=\"row\">{col[0]}</th>\n        <td>{col[1]}</td>\n        <td>{col[2]}</td>\n        <td>{col[3]}</td>\n        <td>{col[4]}</td>\n      </tr>\n    ))\n\n    return [_tableRows, tableData];\n  }\n\n  const handleKeyDown = e => {\n    let searchval = bigInt(e.target.value);\n    if(e.keyCode === 13) {\n    console.log(new Date());\n      if(searchval.lt(1000))\n        setMax(bigInt(1000));\n      else\n        setMax(searchval);\n      setMin(searchval.minus(1000));\n    }\n\n  }\n\n  const paginationNext = () => {\n    setMin(max);\n    setMax(max.plus(1000));\n  }\n  const paginationPrev = () => {\n    if(min.gt(0)){\n      setMin(max.minus(2000));\n      setMax(max.minus(1000));\n    }\n  }\n\n  useEffect(() => {\n    if(finishWork === totalWorker) {\n      let sortedData = rowMap.flat().sort((a,b) => bigInt(a).minus(b));\n      console.log(new Date());\n      let [tableRow,tableData] = generateTableRow(sortedData)\n      setTableRows(tableRow);\n      console.log(tableData)\n      setBuffer(\n        <Pagination size=\"sm\">\n          <PaginationItem>\n            <PaginationLink previous onClick={paginationPrev}/>\n          </PaginationItem>\n          <PaginationItem>\n            <input type=\"text\" onKeyDown={handleKeyDown}/>\n          </PaginationItem>\n          <PaginationItem>\n            <PaginationLink next onClick={paginationNext}/>\n          </PaginationItem>\n          <PaginationItem>\n            <CSVLink data={tableData} headers={[\"row\",\"1\",\"3\",\"7\",\"9\"]}><Button>Export to CSV</Button></CSVLink>\n          </PaginationItem>\n        </Pagination>\n      )\n\n    } else setBuffer(finishWork/totalWorker)\n  },[rowMap]);\n\n  useEffect(() =>{\n    _setRowMap([]);\n    finishWork=0;\n    let workers = createWork(P_Worker, [min.toString(),max.toString()])\n    workers.then(data => {\n        rowMap = rowMap.concat(data);\n        finishWork++;\n        _setRowMap(rowMap);\n      })\n  }, [min,max])\n\n  return(\n    <div>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>1</th>\n              <th>3</th>\n              <th>7</th>\n              <th>9</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tableRows}\n          </tbody>\n        </Table>\n        {temporaryBuffer}\n    </div>\n  )\n}\nReactDOM.render(\n  <div>\n    <PrimeTable/>\n  </div>, document.getElementById('root')\n)\n"],"sourceRoot":""}