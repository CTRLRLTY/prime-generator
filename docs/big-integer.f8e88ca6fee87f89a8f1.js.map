{"version":3,"sources":["webpack:///./node_modules/big-integer/BigInteger.js"],"names":["BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","BigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","value","sign","this","isSmall","SmallInteger","NativeBigInt","isPrecise","n","Math","floor","arrayToSmall","arr","trim","length","compareAbs","i","createArray","x","Array","truncate","ceil","add","a","b","sum","l_a","l_b","r","carry","base","push","addAny","addSmall","l","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","j","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","Error","negate","abs","comparison","quotientDigit","shift","result","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","unshift","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","d","nPrev","prev","divide","next","bigInt","modPow","prototype","Object","create","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","slice","c","ac","bd","abcd","times","_multiplyBySmall","divmod","over","pow","toString","_0","_1","_2","isNegative","exp","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","t","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","String","shiftRight","remQuo","and","or","xor","roughLOB","min","gcd","integerLogarithm","tmp","p","e","text","toLowerCase","absBase","alphabetValues","digits","start","parseBaseFromArray","val","toBase","apply","map","valueOf","neg","Number","out","left","digit","toBaseString","stringify","join","parseStringValue","split","decimalPlace","indexOf","test","parseNumberValue","toArray","str","toJSON","parseInt","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","top","fromArray","module","hasOwnProperty","exports"],"mappings":"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","file":"big-integer.f8e88ca6fee87f89a8f1.js","sourcesContent":["var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n"],"sourceRoot":""}