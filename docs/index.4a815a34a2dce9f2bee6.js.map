{"version":3,"sources":["webpack:///./src/rsa.js","webpack:///./src/app.js"],"names":["bigInt","require","RSA","p","q","e","this","n","multiply","temp1","minus","temp2","phi","encrypt","plaintext","key","modPow","decrypt","ciphertext","d","validate","msg","i","length","push","toString","generateCandidate","phiArray","test","decryptable","propertyPhi","k","temp","plus","isDivisibleBy","privateKey","divide","candidateBar","increment","tempD","isPrime","pop","isOdd","ii","prototype","getAllPhi","y","r","pow","isEven","generatePublicKey","PrimeTable","props","useState","value","setValue","modal","setModal","tableRows","setTableRows","rowMap","setRowMap","max","setMax","min","setMin","generateTableRow","primeMap","primeArray","lt","generatePrime","filter","prime","lastDigit","slice","IsSelectedPrime","console","log","tempRowMap","map","row","rowString","primeRows","gt","_primeRows","undefined","primetd","scope","handleToggle","useEffect","type","name","onChange","event","target","Button","onClick","leq","genRowMap","Modal","isOpen","toggle","ModalBody","Table","bordered","Pagination","size","PaginationItem","PaginationLink","first","previous","next","last","ReactDOM","render","document","getElementById"],"mappings":"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","file":"index.4a815a34a2dce9f2bee6.js","sourcesContent":["const bigInt = require(\"big-integer\")\n\n//************************************* Function ************************************* //\n//**\n//*\n//\nexport function RSA(p,q,e) {\n  this.p = p;\n  this.q = q;\n  this.e = e;\n  this.n = bigInt(p).multiply(q);\n  let temp1 = bigInt(p).minus(1)\n  let temp2 = bigInt(q).minus(1)\n  this.phi = temp1.multiply(temp2);\n}\n\nRSA.encrypt = (plaintext, key) => plaintext.modPow(key.e,key.n);\nRSA.decrypt = (ciphertext, key) =>  ciphertext.modPow(key.d,key.n);\nRSA.validate = (ciphertext,plaintext,key) => {\n  let msg = [];\n  // Check whether the decrypted text match with the plaintext\n  for(let i = 0; i < ciphertext.length; i++) {\n    msg.push(RSA.decrypt(bigInt(ciphertext[i]),key));\n    if(msg[i].toString() !== plaintext[i]) return false\n  }\n\n  return true\n}\nRSA.generateCandidate = function (phiArray,{e:e,n:n} = {e: 0, n:0},ciphertext,plaintext) {\n  let d = {};\n  let test = {};\n  let decryptable = {};\n  for(let i = 0; i < phiArray.length; i++){\n    let phi = bigInt(phiArray[i]);\n    let propertyPhi = phi.toString();\n    d[propertyPhi] = []\n    test[propertyPhi] = []\n    decryptable[propertyPhi] = []\n\n    for (let k=1; d[propertyPhi].length < 1; k++) { //((phi*k)+1)/e\n      let temp = phi.multiply(k).plus(1)\n      if(temp.isDivisibleBy(e)){\n        let privateKey = {d:temp.divide(e),n};\n        if(RSA.validate(ciphertext,plaintext,privateKey)) {\n          candidateBar.increment();\n          d[propertyPhi].push(privateKey.d.toString());\n        }\n      }\n    }\n\n    if (d[propertyPhi].length > 0) {\n      if(i > 0){ //only for non true description\n        let tempD = bigInt(d[propertyPhi][0]); // Set first d to temp\n        if(!bigInt(d[propertyPhi][0]).isPrime()) d[propertyPhi].pop() // if not prime pop the first element\n        while(d[propertyPhi].length < 5) {\n          tempD = tempD.plus(phi); // d+phi*n\n          if(RSA.validate(ciphertext,plaintext,{d:tempD,n}) && tempD.isOdd()) {\n            candidateBar.increment();\n            d[propertyPhi].push(tempD.toString()) //is it odd and can decrypt\n          }\n        }\n      } else {\n        for(let ii=0; d[propertyPhi].length < 5; ii++) { //d+r*n\n          let tempD = bigInt(d[propertyPhi][ii]).plus(phi); //d+phi*n\n          candidateBar.increment();\n          d[propertyPhi].push(tempD.toString());\n        }\n      }\n\n    }\n\n    //condition check\n    for(let ii=0; ii < d[propertyPhi].length; ii++) { //d+r*n\n      test[propertyPhi].push(bigInt(d[propertyPhi][ii]).isPrime())\n      decryptable[propertyPhi].push(RSA.validate(ciphertext,plaintext,{d:d[propertyPhi][ii],n}))\n    }\n  }\n\n  return [d,test,decryptable];\n}\nRSA.prototype.getAllPhi = function() {\n  let phi = this.phi;\n  let n = this.n;\n  let phiArray = [];\n  let r = phi;\n  let y;\n  for(\n    y = 0,temp = bigInt(2).pow(y);\n    phiArray.length < 5 && r.isEven();\n    y++,temp = bigInt(2).pow(y),r = phi.divide(temp)\n  ) {\n    if(phi.isDivisibleBy(temp)) {\n      phiArray.push(r.toString());\n    }\n  }\n  phiArray.push(r.toString()); //last push since its not divisible anymore\n\n  return phiArray;\n}\nRSA.prototype.generatePublicKey = function() {\n  let n = this.n;\n  let e = this.e;\n  let publicKey = {e, n};\n  return publicKey;\n}\n\nexport function generatePrime(min,max) {\n  let primeArray = [];\n  for(let i = bigInt(min); i.lt(max); i = i.plus(1))\n    if(i.isPrime()) primeArray.push(i);\n  return primeArray\n}\nexport function genRowMap(min,max) {\n    const rowMap = [];\n    for(let i = bigInt(min); i.leq(max); i = i.plus(1))\n        if(i.isDivisibleBy(10) || i === 0) rowMap.push(i);\n    return rowMap;\n  }\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  Table,\n  Button,\n  Modal,\n  ModalBody,\n  Pagination,\n  PaginationItem,\n  PaginationLink\n} from 'reactstrap';\nimport {generatePrime, genRowMap} from './rsa'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction getLastDigit(str) {\n  return str.slice(-1);\n}\nfunction IsSelectedPrime(prime) {\n//This function does not check if the parameter is prime, it is assume its prime\n  let lastDigit = prime.slice(-1);\n  if(lastDigit === '1' || lastDigit === '3' || lastDigit === '7' || lastDigit === '9')\n    return true;\n}\n\nfunction PrimeTable(props) {\n  const [value, setValue] = useState('');\n  const [modal, setModal] = useState(false);\n  const [tableRows, setTableRows] = useState(null);\n  const [rowMap, setRowMap] = useState([]);\n  const [max, setMax] = useState(1000);\n  const [min, setMin] = useState(0);\n\n  function generateTableRow() {\n    const primeArray = generatePrime(min,max);\n    const primeMap = primeArray.filter(prime => IsSelectedPrime(prime.toString()));\n    console.log(\"done generate prime map\");\n\n    const tempRowMap = rowMap.slice(min/10, max/10);\n    console.log(\"done slicing rowmap\")\n\n    const _tableRows = tempRowMap.map(row => {\n      const rowString = row.toString(); //Row is of BigInt type so it need to be in string\n      const primeRows = primeMap.filter(prime => prime.gt(row) && prime.lt(row.plus(10)));\n      const _primeRows = [null,null,null,null];\n      for (let i=0; i < 4; i++) {\n        if(primeRows[i] !== undefined) {\n          //All of the primeRows are of BigInt, it needs to be stored as string or error will occured\n          let lastDigit = getLastDigit(primeRows[i].toString());\n          if(lastDigit === '1') _primeRows[0] = primeRows[i].toString();\n          else if (lastDigit === '3') _primeRows[1] = primeRows[i].toString();\n          else if (lastDigit === '7') _primeRows[2] = primeRows[i].toString();\n          else if (lastDigit === '9') _primeRows[3] = primeRows[i].toString();\n        }\n      }\n\n      const primetd = _primeRows.map(prime => (\n        <td>{prime}</td>\n      ));\n\n      return (\n        <tr key={rowString}>\n          <th scope=\"row\">{rowString}</th>\n          {primetd}\n        </tr>\n      )\n    })\n    return _tableRows;\n  }\n\n\n  const handleChange = event => {\n    setValue(event.target.value);\n  }\n\n  const handleClick = () => {\n    setMin(0);\n    setMax(1000);\n    setRowMap(genRowMap(0,+value));\n    setTableRows(generateTableRow(value))\n    setModal(true);\n  }\n\n  const handleToggle = () => {\n    setModal(!modal);\n  }\n\n  const paginationNext = event => {\n    if(max !== +value){\n      setMin(max);\n      setMax(max+1000);\n    }\n  }\n  const paginationPrev = () => {\n    if(min !== 0){\n      setMin(max-2000);\n      setMax(max-1000);\n    }\n  }\n\n  useEffect(() =>{\n    setTableRows(generateTableRow(value))\n  }, [min,max,value,modal])\n\n  return(\n    <div>\n      <label>\n      generate prime:<br/>\n      <input type=\"text\" name=\"prime_num\" value={value} onChange={handleChange}/>\n      </label>\n      <br/>\n      <Button onClick={handleClick}>Generate</Button>\n      <Button onClick={handleToggle}>Hide Table</Button>\n      <Modal isOpen={modal} toggle={handleToggle}>\n        <ModalBody>\n          <Table bordered>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>1</th>\n                <th>3</th>\n                <th>7</th>\n                <th>9</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tableRows}\n            </tbody>\n          </Table>\n          <Pagination size=\"sm\">\n            <PaginationItem>\n              <PaginationLink first/>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink previous onClick={paginationPrev}/>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink next onClick={paginationNext}/>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink last/>\n            </PaginationItem>\n          </Pagination>\n        </ModalBody>\n      </Modal>\n    </div>\n  )\n}\nReactDOM.render(\n  <div>\n    <PrimeTable/>\n  </div>, document.getElementById('root')\n)\n"],"sourceRoot":""}