{"version":3,"sources":["webpack:///./src/rsa.js","webpack:///./src/prime.worker.js","webpack:///./src/app.js"],"names":["bigInt","require","RSA","p","q","e","this","n","multiply","temp1","minus","temp2","phi","encrypt","plaintext","key","modPow","decrypt","ciphertext","d","validate","msg","i","length","push","toString","generateCandidate","phiArray","test","decryptable","propertyPhi","k","temp","plus","isDivisibleBy","privateKey","divide","candidateBar","increment","tempD","isPrime","pop","isOdd","ii","prototype","getAllPhi","y","r","pow","isEven","generatePublicKey","Worker","createWork","worker","data","Promise","resolve","reject","thread","postMessage","onmessage","terminate","PrimeTable","props","useState","modal","setModal","tableRows","setTableRows","max","setMax","min","setMin","generateTableRow","primeArray","primeMap","filter","prime","lastDigit","slice","IsSelectedPrime","console","log","rowMap","leq","isZero","genRowMap","_tableRows","map","row","primeRows","gt","lt","_primeRows","undefined","primetd","scope","handleToggle","useEffect","workers","tempMax","tempMin","P_Worker","all","then","sortedData","flat","sort","a","b","Button","onClick","Modal","size","isOpen","toggle","ModalBody","Table","bordered","Pagination","PaginationItem","PaginationLink","previous","type","onKeyDown","searchval","target","value","keyCode","next","ReactDOM","render","document","getElementById"],"mappings":"ubAAMA,EAASC,EAAQ,QAOvB,SAASC,EAAIC,EAAEC,EAAEC,GACfC,KAAKH,EAAIA,EACTG,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EACTC,KAAKC,EAAIP,EAAOG,GAAGK,SAASJ,GAC5B,IAAIK,EAAQT,EAAOG,GAAGO,MAAM,GACxBC,EAAQX,EAAOI,GAAGM,MAAM,GAC5BJ,KAAKM,IAAMH,EAAMD,SAASG,GAG5BT,EAAIW,QAAU,SAACC,EAAWC,GAAZ,OAAoBD,EAAUE,OAAOD,EAAIV,EAAEU,EAAIR,IAC7DL,EAAIe,QAAU,SAACC,EAAYH,GAAb,OAAsBG,EAAWF,OAAOD,EAAII,EAAEJ,EAAIR,IAChEL,EAAIkB,SAAW,SAACF,EAAWJ,EAAUC,GAGnC,IAFA,IAAIM,EAAM,GAEFC,EAAI,EAAGA,EAAIJ,EAAWK,OAAQD,IAEpC,GADAD,EAAIG,KAAKtB,EAAIe,QAAQjB,EAAOkB,EAAWI,IAAIP,IACxCM,EAAIC,GAAGG,aAAeX,EAAUQ,GAAI,OAAO,EAGhD,OAAO,GAETpB,EAAIwB,kBAAoB,SAAUC,GAIhC,IAJuF,6DAAlC,CAACtB,EAAG,EAAGE,EAAE,GAAlBF,EAA2C,EAA7CA,EAAME,EAAuC,EAAzCA,EAAmBW,EAAsB,uCAAXJ,EAAW,uCACnFK,EAAI,GACJS,EAAO,GACPC,EAAc,GACVP,EAAI,EAAGA,EAAIK,EAASJ,OAAQD,IAAI,CACtC,IAAIV,EAAMZ,EAAO2B,EAASL,IACtBQ,EAAclB,EAAIa,WACtBN,EAAEW,GAAe,GACjBF,EAAKE,GAAe,GACpBD,EAAYC,GAAe,GAE3B,IAAK,IAAIC,EAAE,EAAGZ,EAAEW,GAAaP,OAAS,EAAGQ,IAAK,CAC5C,IAAIC,EAAOpB,EAAIJ,SAASuB,GAAGE,KAAK,GAChC,GAAGD,EAAKE,cAAc7B,GAAG,CACvB,IAAI8B,EAAa,CAAChB,EAAEa,EAAKI,OAAO/B,GAAGE,KAChCL,EAAIkB,SAASF,EAAWJ,EAAUqB,KACnCE,aAAaC,YACbnB,EAAEW,GAAaN,KAAKW,EAAWhB,EAAEM,cAKvC,GAAIN,EAAEW,GAAaP,OAAS,EAC1B,GAAGD,EAAI,EAAE,CACP,IAAIiB,EAAQvC,EAAOmB,EAAEW,GAAa,IAElC,IADI9B,EAAOmB,EAAEW,GAAa,IAAIU,WAAWrB,EAAEW,GAAaW,MAClDtB,EAAEW,GAAaP,OAAS,GAC5BgB,EAAQA,EAAMN,KAAKrB,GAChBV,EAAIkB,SAASF,EAAWJ,EAAU,CAACK,EAAEoB,EAAMhC,OAAOgC,EAAMG,UACzDL,aAAaC,YACbnB,EAAEW,GAAaN,KAAKe,EAAMd,kBAI9B,IAAI,IAAIkB,EAAG,EAAGxB,EAAEW,GAAaP,OAAS,EAAGoB,IAAM,CAC7C,IAAIJ,EAAQvC,EAAOmB,EAAEW,GAAaa,IAAKV,KAAKrB,GAC5CyB,aAAaC,YACbnB,EAAEW,GAAaN,KAAKe,EAAMd,YAOhC,IAAI,IAAIkB,EAAG,EAAGA,EAAKxB,EAAEW,GAAaP,OAAQoB,IACxCf,EAAKE,GAAaN,KAAKxB,EAAOmB,EAAEW,GAAaa,IAAKH,WAClDX,EAAYC,GAAaN,KAAKtB,EAAIkB,SAASF,EAAWJ,EAAU,CAACK,EAAEA,EAAEW,GAAaa,GAAIpC,OAI1F,MAAO,CAACY,EAAES,EAAKC,IAEjB3B,EAAI0C,UAAUC,UAAY,WACxB,IAIIC,EAJAlC,EAAMN,KAAKM,IAEXe,GADIrB,KAAKC,EACE,IACXwC,EAAInC,EAER,IACEkC,EAAI,EAAEd,KAAOhC,EAAO,GAAGgD,IAAIF,GAC3BnB,EAASJ,OAAS,GAAKwB,EAAEE,SACzBH,IAAId,KAAOhC,EAAO,GAAGgD,IAAIF,GAAGC,EAAInC,EAAIwB,OAAOJ,MAExCpB,EAAIsB,cAAcF,OACnBL,EAASH,KAAKuB,EAAEtB,YAKpB,OAFAE,EAASH,KAAKuB,EAAEtB,YAETE,GAETzB,EAAI0C,UAAUM,kBAAoB,WAChC,IAAI3C,EAAID,KAAKC,EAGb,MADgB,CAACF,EADTC,KAAKD,EACOE,MCvGP,iBACb,OAAO,IAAI4C,OAAO,IAA0B,gD,i9BCgB9C,SAASC,EAAWC,EAAQC,GAC1B,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1B,IAAIC,EAAS,IAAIL,EACjBK,EAAOC,YAAYL,GACnBI,EAAOE,UAAY,SAAAvD,GACjBqD,EAAOG,YACPL,EAAQnD,EAAEiD,UAkBhB,SAASQ,EAAWC,GAAO,QACCC,oBAAS,GADV,GAClBC,EADkB,KACXC,EADW,SAESF,mBAAS,MAFlB,GAElBG,EAFkB,KAEPC,EAFO,SAGHJ,mBAAShE,IAAO,MAHb,GAGlBqE,EAHkB,KAGbC,EAHa,SAIHN,mBAAShE,IAAO,IAJb,GAIlBuE,EAJkB,KAIbC,EAJa,KAMzB,SAASC,EAAiBC,GAExB,IAAMC,EAAWD,EAAWE,QAAO,SAAAC,GAAK,OAhB5C,SAAyBA,GAEvB,IAAIC,EAAYD,EAAME,OAAO,GAC7B,GAAiB,MAAdD,GAAmC,MAAdA,GAAmC,MAAdA,GAAmC,MAAdA,EAChE,OAAO,EAYqCE,CAAgBH,MAC5DI,QAAQC,IAAI,wBACZ,IAAMC,EF+DH,SAAmBZ,EAAIF,GAE1B,IADA,IAAMc,EAAS,GACP7D,EAAItB,EAAOuE,GAAMjD,EAAE8D,IAAIf,GAAM/C,EAAIA,EAAEW,KAAK,IACzCX,EAAEY,cAAc,KAAOZ,EAAE+D,WAAUF,EAAO3D,KAAKF,EAAEG,YACxD,OAAO0D,EEnEQG,CAAUf,EAAIF,GAC7BY,QAAQC,IAAI,0BAEZ,IAAMK,EAAaJ,EAAOK,KAAI,SAAAC,GAG5B,IAFA,IAAMC,EAAYf,EAASC,QAAO,SAAAC,GAAK,OAAI7E,IAAO6E,GAAOc,GAAGF,IAAQzF,IAAO6E,GAAOe,GAAG5F,IAAOyF,GAAKxD,KAAK,QAChG4D,EAAa,CAAC,KAAK,KAAK,KAAK,MAC1BvE,EAAE,EAAGA,EAAI,EAAGA,IACnB,QAAoBwE,IAAjBJ,EAAUpE,GAAkB,CAE7B,IAAIwD,EAAyBY,EAAUpE,GAAGG,WA9BvCsD,OAAO,GA+BO,MAAdD,EAAmBe,EAAW,GAAKH,EAAUpE,GAAGG,WAC5B,MAAdqD,EAAmBe,EAAW,GAAKH,EAAUpE,GAAGG,WAClC,MAAdqD,EAAmBe,EAAW,GAAKH,EAAUpE,GAAGG,WAClC,MAAdqD,IAAmBe,EAAW,GAAKH,EAAUpE,GAAGG,YAI7D,IAAMsE,EAAUF,EAAWL,KAAI,SAAAX,GAAK,OAClC,4BAAKA,MAGP,OACE,4BACE,wBAAImB,MAAM,OAAOP,GAChBM,MAMP,OADAd,QAAQC,IAAI,6BACLK,EAGT,IAsBMU,EAAe,WACnB/B,GAAUD,IAqCZ,OAvBAiC,qBAAU,WAIR,IAHA,IAAIC,EAAU,GACVC,EAAU/B,EACVgC,EAAU9B,EACNjD,EAAI,EAAGA,EAAI,GAAIA,IACrB6E,EAAQ7E,GAAK8B,EAAWkD,EAAU,CAACD,EAAQ5E,WAAW2E,EAAQ3E,aAE9D4E,GADAD,EAAUA,EAAQ1F,MAAMV,IAAO,MACbU,MAAMV,IAAO,KAQjCuD,QAAQgD,IAAIJ,GAASK,MAAK,SAAAlD,GACxB,IAAImD,EAAanD,EAAKoD,OAAOC,MAAK,SAACC,EAAEC,GAAH,OAAS7G,IAAO4G,GAAGlG,MAAMmG,MAC3DzC,EAAaK,EAAiBgC,IAC9BxB,QAAQC,IAAI,6BAGb,CAACX,EAAIF,IAGN,6BACE,kBAACyC,EAAA,EAAD,CAAQC,QAASd,GAAjB,iBACA,kBAACe,EAAA,EAAD,CAAOC,KAAK,KAAKC,OAAQjD,EAAOkD,OAAQlB,GACtC,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOC,UAAQ,GACb,+BACE,4BACE,iCACA,iCACA,iCACA,iCACA,mCAGJ,+BACGnD,IAGL,kBAACoD,EAAA,EAAD,CAAYN,KAAK,MACf,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBC,UAAQ,EAACX,QAnDd,WAClBxC,EAAIoB,GAAG,KACRnB,EAAOH,EAAI3D,MAAM,MACjB4D,EAAOD,EAAI3D,MAAM,WAkDX,kBAAC8G,EAAA,EAAD,KACE,2BAAOG,KAAK,OAAOC,UA3ET,SAAAvH,GACpB,IAAIwH,EAAY7H,IAAOK,EAAEyH,OAAOC,OAEf,KAAd1H,EAAE2H,UACAH,EAAUjC,GAAG,KACdtB,EAAOtE,IAAO,MAEdsE,EAAOuD,GACTrD,EAAOqD,EAAUnH,MAAM,WAqEjB,kBAAC8G,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAgBQ,MAAI,EAAClB,QA7DV,WACrBvC,EAAOH,GACPC,EAAOD,EAAIpC,KAAK,cAmEpBiG,IAASC,OACP,6BACE,kBAACrE,EAAD,OACMsE,SAASC,eAAe,W","file":"index.7ffe2d4a837acde6dbb5.js","sourcesContent":["const bigInt = require(\"big-integer\")\n\n\n//************************************* Function ************************************* //\n//**\n//*\n//\nfunction RSA(p,q,e) {\n  this.p = p;\n  this.q = q;\n  this.e = e;\n  this.n = bigInt(p).multiply(q);\n  let temp1 = bigInt(p).minus(1)\n  let temp2 = bigInt(q).minus(1)\n  this.phi = temp1.multiply(temp2);\n}\n\nRSA.encrypt = (plaintext, key) => plaintext.modPow(key.e,key.n);\nRSA.decrypt = (ciphertext, key) =>  ciphertext.modPow(key.d,key.n);\nRSA.validate = (ciphertext,plaintext,key) => {\n  let msg = [];\n  // Check whether the decrypted text match with the plaintext\n  for(let i = 0; i < ciphertext.length; i++) {\n    msg.push(RSA.decrypt(bigInt(ciphertext[i]),key));\n    if(msg[i].toString() !== plaintext[i]) return false\n  }\n\n  return true\n}\nRSA.generateCandidate = function (phiArray,{e:e,n:n} = {e: 0, n:0},ciphertext,plaintext) {\n  let d = {};\n  let test = {};\n  let decryptable = {};\n  for(let i = 0; i < phiArray.length; i++){\n    let phi = bigInt(phiArray[i]);\n    let propertyPhi = phi.toString();\n    d[propertyPhi] = []\n    test[propertyPhi] = []\n    decryptable[propertyPhi] = []\n\n    for (let k=1; d[propertyPhi].length < 1; k++) { //((phi*k)+1)/e\n      let temp = phi.multiply(k).plus(1)\n      if(temp.isDivisibleBy(e)){\n        let privateKey = {d:temp.divide(e),n};\n        if(RSA.validate(ciphertext,plaintext,privateKey)) {\n          candidateBar.increment();\n          d[propertyPhi].push(privateKey.d.toString());\n        }\n      }\n    }\n\n    if (d[propertyPhi].length > 0) {\n      if(i > 0){ //only for non true description\n        let tempD = bigInt(d[propertyPhi][0]); // Set first d to temp\n        if(!bigInt(d[propertyPhi][0]).isPrime()) d[propertyPhi].pop() // if not prime pop the first element\n        while(d[propertyPhi].length < 5) {\n          tempD = tempD.plus(phi); // d+phi*n\n          if(RSA.validate(ciphertext,plaintext,{d:tempD,n}) && tempD.isOdd()) {\n            candidateBar.increment();\n            d[propertyPhi].push(tempD.toString()) //is it odd and can decrypt\n          }\n        }\n      } else {\n        for(let ii=0; d[propertyPhi].length < 5; ii++) { //d+r*n\n          let tempD = bigInt(d[propertyPhi][ii]).plus(phi); //d+phi*n\n          candidateBar.increment();\n          d[propertyPhi].push(tempD.toString());\n        }\n      }\n\n    }\n\n    //condition check\n    for(let ii=0; ii < d[propertyPhi].length; ii++) { //d+r*n\n      test[propertyPhi].push(bigInt(d[propertyPhi][ii]).isPrime())\n      decryptable[propertyPhi].push(RSA.validate(ciphertext,plaintext,{d:d[propertyPhi][ii],n}))\n    }\n  }\n\n  return [d,test,decryptable];\n}\nRSA.prototype.getAllPhi = function() {\n  let phi = this.phi;\n  let n = this.n;\n  let phiArray = [];\n  let r = phi;\n  let y;\n  for(\n    y = 0,temp = bigInt(2).pow(y);\n    phiArray.length < 5 && r.isEven();\n    y++,temp = bigInt(2).pow(y),r = phi.divide(temp)\n  ) {\n    if(phi.isDivisibleBy(temp)) {\n      phiArray.push(r.toString());\n    }\n  }\n  phiArray.push(r.toString()); //last push since its not divisible anymore\n\n  return phiArray;\n}\nRSA.prototype.generatePublicKey = function() {\n  let n = this.n;\n  let e = this.e;\n  let publicKey = {e, n};\n  return publicKey;\n}\nexport default RSA;\n\nexport function generatePrime(min,max) {\n  let primeArray = [];\n  for(let i = bigInt(min); i.lt(max); i = i.plus(1))\n    if(i.isPrime()) primeArray.push(i);\n  return primeArray\n}\nexport function genRowMap(min,max) {\n    const rowMap = [];\n    for(let i = bigInt(min); i.leq(max); i = i.plus(1))\n        if(i.isDivisibleBy(10) || i.isZero()) rowMap.push(i.toString());\n    return rowMap;\n  }\n","export default function() {\n  return new Worker(__webpack_public_path__ + \"prime.worker.ab011b7271a1080a5378.worker.js\");\n}\n","import React, {useState, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport bigInt from 'big-integer';\nimport {\n  Table,\n  Button,\n  Modal,\n  ModalBody,\n  Pagination,\n  PaginationItem,\n  PaginationLink\n} from 'reactstrap';\nimport {generatePrime, genRowMap} from './rsa'\nimport P_Worker from './prime.worker.js';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app.css';\n\nfunction createWork(worker, data) {\n  return new Promise((resolve,reject) => {\n    let thread = new worker();\n    thread.postMessage(data);\n    thread.onmessage = e => {\n      thread.terminate();\n      resolve(e.data);\n    }\n  })\n}\n\n\nfunction getLastDigit(str) {\n  return str.slice(-1);\n}\n\nfunction IsSelectedPrime(prime) {\n  //This function does not check if the parameter is prime, it is assume its prime\n  let lastDigit = prime.slice(-1);\n  if(lastDigit === '1' || lastDigit === '3' || lastDigit === '7' || lastDigit === '9')\n    return true;\n}\n\nlet test;\nfunction PrimeTable(props) {\n  const [modal, setModal] = useState(false);\n  const [tableRows, setTableRows] = useState(null);\n  const [max, setMax] = useState(bigInt(1000));\n  const [min, setMin] = useState(bigInt(0));\n\n  function generateTableRow(primeArray) {\n\n    const primeMap = primeArray.filter(prime => IsSelectedPrime(prime));\n    console.log('done filtering prime');\n    const rowMap = genRowMap(min,max);\n    console.log('done generating rowMap');\n\n    const _tableRows = rowMap.map(row => {\n      const primeRows = primeMap.filter(prime => bigInt(prime).gt(row) && bigInt(prime).lt(bigInt(row).plus(10)));\n      const _primeRows = [null,null,null,null];\n      for (let i=0; i < 4; i++) {\n        if(primeRows[i] !== undefined) {\n          //All of the primeRows are of BigInt, it needs to be stored as string or error will occured\n          let lastDigit = getLastDigit(primeRows[i].toString());\n          if(lastDigit === '1') _primeRows[0] = primeRows[i].toString();\n          else if (lastDigit === '3') _primeRows[1] = primeRows[i].toString();\n          else if (lastDigit === '7') _primeRows[2] = primeRows[i].toString();\n          else if (lastDigit === '9') _primeRows[3] = primeRows[i].toString();\n        }\n      }\n\n      const primetd = _primeRows.map(prime => (\n        <td>{prime}</td>\n      ));\n\n      return (\n        <tr >\n          <th scope=\"row\">{row}</th>\n          {primetd}\n        </tr>\n      );\n    });\n\n    console.log('done generating tableRows');\n    return _tableRows;\n  }\n\n  const handleClick = () => {\n    setMin(bigInt.zero);\n    setMax(bigInt('1000'));\n\n    setTableRows(generateTableRow())\n    setValue(bigInt(event.target.value));\n    setModal(true);\n  }\n\n  const handleKeyDown = e => {\n    let searchval = bigInt(e.target.value);\n\n    if(e.keyCode === 13) {\n      if(searchval.lt(1000))\n        setMax(bigInt(1000));\n      else\n        setMax(searchval);\n      setMin(searchval.minus(1000));\n    }\n\n  }\n\n  const handleToggle = () => {\n    setModal(!modal);\n  }\n\n  const paginationNext = () => {\n    setMin(max);\n    setMax(max.plus(1000));\n  }\n  const paginationPrev = () => {\n    if(min.gt(0)){\n      setMin(max.minus(2000));\n      setMax(max.minus(1000));\n    }\n  }\n\n  useEffect(() =>{\n    let workers = [];\n    let tempMax = max;\n    let tempMin = min;\n    for(let i = 0; i < 20; i++) {\n      workers[i] = createWork(P_Worker, [tempMin.toString(),tempMax.toString()])\n      tempMax = tempMax.minus(bigInt(50));\n      tempMin = tempMax.minus(bigInt(50));\n    }\n\n    /*\n    createWork(P_Worker, [min.toString(),max.toString()])\n      .then(data => setTableRows(generateTableRow(data)));\n      */\n    //workers[0].then(data => setTableRows(generateTableRow(data)))\n    Promise.all(workers).then(data => {\n      let sortedData = data.flat().sort((a,b) => bigInt(a).minus(b));\n      setTableRows(generateTableRow(sortedData));\n      console.log('done settingup table')\n    })\n\n  }, [min,max])\n\n  return(\n    <div>\n      <Button onClick={handleToggle}>Mapped Tables</Button>\n      <Modal size=\"lg\" isOpen={modal} toggle={handleToggle}>\n        <ModalBody>\n          <Table bordered>\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>1</th>\n                <th>3</th>\n                <th>7</th>\n                <th>9</th>\n              </tr>\n            </thead>\n            <tbody>\n              {tableRows}\n            </tbody>\n          </Table>\n          <Pagination size=\"sm\">\n            <PaginationItem>\n              <PaginationLink previous onClick={paginationPrev}/>\n            </PaginationItem>\n            <PaginationItem>\n              <input type=\"text\" onKeyDown={handleKeyDown}/>\n            </PaginationItem>\n            <PaginationItem>\n              <PaginationLink next onClick={paginationNext}/>\n            </PaginationItem>\n          </Pagination>\n        </ModalBody>\n      </Modal>\n    </div>\n  )\n}\nReactDOM.render(\n  <div>\n    <PrimeTable/>\n  </div>, document.getElementById('root')\n)\n"],"sourceRoot":""}